{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },

  "Credentials": {
    "Email": {
      //Replace yourdomain.com below with your actual domain & extension
      "Client": "mail.kurtiscaldwell.com",
      //Replace mail@yourdomain.com below with the email user you created in your hosting account
      "User": "Admin@kurtiscaldwell.com",
      //Replace the password below with the one used for the email user you created in the hosting account
      "Password": "P@ssw0rd!",
      //Replace mail@provider below with the email address where you want to recieve contact form messages
      "Recipient": "kcaldwell86@outlook.com"
    }
  },


  "AllowedHosts": "*"
}
/*This is a good start, Kurtis! A few notes:

- The template is fun! Nice job incorporating it.
- Consider making the "Welcome" page the landing page/index
- You might remove the style switcher floating in the top right; that feature is typically for developers testing different theme options but is not usually included in final user-facing sites
- The resume page looks good but could use some additional content. Be sure to also include a link to download a PDF version of your resume
- The links page looks good. You might consider adding a script that scrolls through the pages of classmate links automatically (the template may have included one or you can write one yourself), or text/indicators to let users know they can click the bubbles along the bottom to advance through the list of classmates.
- Your portfolio page still has the template's placeholder images and text. Consider removing them or updating them with your own content to link to your projects.

Keep up the good work!
*/



/*
In your PersonalSite solution, open appsettings.json and add the Credentials section.
You can use the same email credentials as written in the CORE1 class solution.
Right click the Models folder and select Add > Class. Name the class “ContactViewModel” and click “Add”.
Add properties and data annotations for Name, Email, Subject, and Message.
Open the Home Controller and add a using statement for the Models namespace.
In the Visual Studio 2022 ribbon, click Tools > NuGet Package Manager > Manage NuGet Packages for Solution
Click the “Browse” tab in the top left of the NuGet – Solution window, then search for NETCore.MailKit.
Click NETCore.MailKit, then check the box next to your PersonalSite project and click “Install”.
Once the installation is complete, close the NuGet – Solution window and return to the Home Controller.
Add using statements for the MimeKit and MailKit.Net.Smtp namespaces.
Add the following field and constructor to your Home Controller:
private readonly IConfiguration _config;
public HomeController(IConfiguration config) { _config = config; }
Create the GET Contact Action.
In the Visual Studio 2022 ribbon, click Tools > NuGet Package Manager > Manage NuGet Packages for Solution.
Click the “Browse” tab in the top left of the NuGet – Solution window, then search for Microsoft.VisualStudio.Web.
Click Microsoft.VisualStudio.Web.CodeGeneration.Design, then check the box next to your PersonalSite project and click “Install”.
Once the installation is complete, close the NuGet – Solution window and return to the Home Controller.
Create the Contact View:
Right click on the Contact Action and select “Add View”
Select the “Razor View” template and click “Add”
View Name: Contact
Template: Create
Model Class: ContactViewModel
Leave all other settings as-is and click “Add”.
Use the HTML & CSS from your template to style the generated form accordingly.
Return to the Home Controller and create the POST Contact Action.
Ensure the HttpPost annotation is placed directly above the Action.
The Action should accept a ContactViewModel object as a parameter.
Use your CORE1 class solution as a guide for the necessary code in the POST Contact Action.
The POST Contact Action should return an EmailConfirmation View and pass in the ContactViewModel object.
Create the EmailConfirmation View:
Right click on the Views > Home folder and select Add > View.
Select the “Razor View – Empty” template and click “Add”.
Name the View “EmailConfirmation” and click “Add”.
Add the model declaration to the top of the page.
@model ProjectName.Models.ContactViewModel
Use HTML & CSS to style the View as you see fit.
Once complete, go to the _Layout and add a nav link to your Contact View if you have not done so already.
Run the application, visit the Contact View, fill out the contact form and submit.
*/
